{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","react_default","a","createElement","className","onSubmit","this","props","handleSubmit","type","value","item","onChange","handleChange","placeholder","editItem","Component","TodoItem","title","onClick","handleEdit","handleDelete","TodoList","_this","items","map","TodoItem_TodoItem","id","key","clearList","App","state","uuid","event","setState","target","preventDefault","newItem","updatedItems","concat","Object","toConsumableArray","console","log","filteredItems","filter","selectedItem","find","TodoInput_TodoInput","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30e91837.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class TodoInput extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"card card-body my-3\">\r\n          <form onSubmit={this.props.handleSubmit}>\r\n              <div className=\"input-group\">\r\n                  <div className=\"input-group-prepend\">\r\n                      <div className=\"input-group-text bg-primary text-white\">\r\n                          <i className=\"fas fa-book\"></i>\r\n                      </div>\r\n                  </div>\r\n                  <input type=\"text\"value={this.props.item} onChange={this.props.handleChange} placeholder=\"Add a todo item\" className=\"form-control text-capitalize\"/>\r\n              </div>\r\n              <button className={this.props.editItem ? \"btn btn-block btn-success mt-3 \" :\"btn btn-block btn-primary mt-3 \"} type=\"submit\">{this.props.editItem ? \"Edit Item \" :\"Add Item \"}</button>\r\n          </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class TodoItem  extends Component {\r\n  render() {\r\n    return (\r\n      <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\"> \r\n        <h6>{this.props.title}</h6>\r\n        <div className=\"todo-icon\">\r\n            <span  onClick={this.props.handleEdit} className=\"mx-2 text-success\"> <i className=\"fas fa-pen\"></i> </span>\r\n            <span onClick={this.props.handleDelete} className=\"mx-2 text-danger\"> <i className=\"fas fa-trash\"></i> </span>\r\n        </div>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem'\r\n\r\nexport default class TodoList extends Component {\r\n  render() {\r\n//    let todos = this.props.list  ;   \r\n//    alert(todos)\r\n//    todos.map((todo) =>{\r\n//        return(\r\n//            <TodoItem todo= {todo.item} key={todo.id} />\r\n//        )\r\n//    })\r\n    const {items} = this.props ; \r\n    \r\n\r\n    return (\r\n      <ul className=\"list-group my-5\">\r\n        <h3 className=\"text-center text-capitalize\">todo list</h3>\r\n        {/* {console.log(todos)} */}\r\n\r\n        {\r\n            items.map(item =>(\r\n                <TodoItem handleEdit={() => this.props.handleEdit(item.id)} handleDelete={() => this.props.handleDelete(item.id)}  title= {item.title} key={item.id} />\r\n            ))\r\n        }\r\n\r\n        <button onClick={this.props.clearList} className=\"btn btn-danger btn-block mt-5\">Clear All </button>\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n","import React , {Component} from 'react';\nimport  'bootstrap/dist/css/bootstrap.css';\nimport uuid from 'uuid'\nimport TodoInput from './components/TodoInput'\nimport TodoList from './components/TodoList'\n\nclass  App extends Component {\n  state={\n    items:[],\n    id:uuid(), \n    item:'',\n    editItem: false\n  }\n  handleChange = (event) => {\n\n    this.setState({\n      item: event.target.value\n    })\n  }\n  \n  clearList = () =>{\n    this.setState({\n      items:[]\n    })\n  }\n\n  \n\n  handleSubmit =(event)=>{\n    event.preventDefault();\n    if(!this.state.item) return null ; \n    const newItem = {\n      id: this.state.id , \n      title: this.state.item\n    };\n    const updatedItems = [...this.state.items , newItem];\n\n    this.setState({\n      items:updatedItems,\n      item:\"\",\n      id: uuid(),\n      editItem: false \n    } , ()=>{\n      console.log(this.state)\n    })\n    \n  }\n\n\n  handleDelete = (id) =>{\n    const filteredItems = this.state.items.filter(item => item.id !== id );\n    this.setState({\n      items:filteredItems\n    })\n  }\n  \n  handleEdit = (id) =>{\n    const filteredItems = this.state.items.filter(item => item.id !== id );\n    const selectedItem = this.state.items.find( item => item.id === id );\n    console.log(selectedItem)\n    this.setState({\n      items:filteredItems,\n      item : selectedItem.title, \n      id: selectedItem.id,\n      editItem: true \n    })\n\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-capitalize text-center\">todo input</h3>\n            <TodoInput editItem={this.state.editItem} handleSubmit={this.handleSubmit} item={this.state.item} handleChange={this.handleChange}  />\n            <TodoList \n            handleEdit={this.handleEdit} \n            clearList={this.clearList} \n            handleDelete={this.handleDelete} \n            items={this.state.items}  />\n          </div>\n        </div>\n      </div>\n     \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}